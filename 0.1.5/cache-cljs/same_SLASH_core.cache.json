["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$same.core","~:imports",null,"~:requires",["^ ","~$same.compare","^;","~$ish","~$same.ish","^=","^="],"~:uses",["^ ","^<","^=","~$near-zero","^;"],"~:defs",["^ ","~$ish?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^8","~:line",10,"~:column",7,"~:end-line",10,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^J",[["~$expected","~$&","~$actuals"]]]]],"~:doc","Compare one or more values to an expected value, returning true if they are the same-ish.\n  The values can be numbers:\n  ```klipse\n  (let [two (Math/pow (Math/sqrt 2) 2)]\n    [(== 2 two) (ish? 2 two)])\n  ```\n  or data structures:\n  ```klipse\n  (ish? {:a 1 :b [1.99999999999999 3]}\n        {:a 1.00000000000001 :b [2 3.0]})\n  ```\n  you can also compare more than one value to the expected value:\n  ```klipse\n  (ish? 1 1.0 0.99999999999999 1.00000000000001 1)\n  ```","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^J",["^L","^M"]]],"^I",["^J",[["^L","~$&","^M"]]],"~:arglists-meta",["^J",[null]]]],"^7","~$same.core/ish?","^D","same/core.cljc","^H",11,"^O",["^ ","^P",true,"^Q",1,"^R",1,"^S",[["^J",["^L","^M"]]],"^I",["^J",[["^L","~$&","^M"]]],"^T",["^J",[null]]],"^S",[["^J",["^L","^M"]]],"~:protocol-impl",null,"^Q",1,"^T",["^J",[null]],"^F",1,"^P",true,"~:methods",[["^ ","^Q",1,"^P",true,"~:tag","~$boolean"]],"^E",10,"~:ret-tag","~$any","^G",10,"^R",1,"~:fn-var",true,"^I",["^J",[["^L","~$&","^M"]]],"^N","Compare one or more values to an expected value, returning true if they are the same-ish.\n  The values can be numbers:\n  ```klipse\n  (let [two (Math/pow (Math/sqrt 2) 2)]\n    [(== 2 two) (ish? 2 two)])\n  ```\n  or data structures:\n  ```klipse\n  (ish? {:a 1 :b [1.99999999999999 3]}\n        {:a 1.00000000000001 :b [2 3.0]})\n  ```\n  you can also compare more than one value to the expected value:\n  ```klipse\n  (ish? 1 1.0 0.99999999999999 1.00000000000001 1)\n  ```"],"~$zeroish?",["^ ","^B",null,"^C",["^ ","^D","^8","^E",30,"^F",7,"^G",30,"^H",15,"^I",["^J",["^K",["^J",[["~$val","~$&",["^ ","~:keys",["~$scale"],"~:or",["^ ","^14",1000]]]]]]],"^N","Compare a numeric value to zero, returning true if close.\n  ```klipse\n  (zeroish? 0.0000000001\n            :scale 1e6)\n  ```","^O",["^ ","^P",true,"^Q",1,"^R",1,"^S",[["^J",["^12",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^I",["^J",[["^12","~$&",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^T",["^J",[null]]]],"^7","~$same.core/zeroish?","^D","same/core.cljc","^H",15,"^O",["^ ","^P",true,"^Q",1,"^R",1,"^S",[["^J",["^12",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^I",["^J",[["^12","~$&",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^T",["^J",[null]]],"^S",[["^J",["^12",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^V",null,"^Q",1,"^T",["^J",[null]],"^F",1,"^P",true,"^W",[["^ ","^Q",1,"^P",true,"^X","^Y"]],"^E",30,"^Z","^[","^G",30,"^R",1,"^10",true,"^I",["^J",[["^12","~$&",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^N","Compare a numeric value to zero, returning true if close.\n  ```klipse\n  (zeroish? 0.0000000001\n            :scale 1e6)\n  ```"],"~$not-zeroish?",["^ ","^B",null,"^C",["^ ","^D","^8","^E",39,"^F",7,"^G",39,"^H",19,"^I",["^J",["^K",["^J",[["^12","~$&",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]]]],"^N","Compare a numeric value to zero, returning true if not close. Equivalent to `(not (zeroish? ...))`.\n  ```klipse\n  (not-zeroish? 3 :scale 1e6)\n  ```","^O",["^ ","^P",true,"^Q",1,"^R",1,"^S",[["^J",["^12",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^I",["^J",[["^12","~$&",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^T",["^J",[null]]]],"^7","~$same.core/not-zeroish?","^D","same/core.cljc","^H",19,"^O",["^ ","^P",true,"^Q",1,"^R",1,"^S",[["^J",["^12",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^I",["^J",[["^12","~$&",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^T",["^J",[null]]],"^S",[["^J",["^12",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^V",null,"^Q",1,"^T",["^J",[null]],"^F",1,"^P",true,"^W",[["^ ","^Q",1,"^P",true,"^X","^Y"]],"^E",39,"^Z","^[","^G",39,"^R",1,"^10",true,"^I",["^J",[["^12","~$&",["^ ","^13",["^14"],"^15",["^ ","^14",1000]]]]],"^N","Compare a numeric value to zero, returning true if not close. Equivalent to `(not (zeroish? ...))`.\n  ```klipse\n  (not-zeroish? 3 :scale 1e6)\n  ```"],"~$set-comparator!",["^ ","^B",null,"^C",["^ ","^D","^8","^E",47,"^F",7,"^G",47,"^H",22,"^I",["^J",["^K",["^J",[["~$comparator"]]]]],"^N","Set the default comparator.\n  ```klipse\n  (set-comparator! (compare-ulp 2.0 100))\n  (ish? 0.1 (-> 2 Math/sqrt (Math/pow 2) (- 1.9)))\n  ```"],"^7","~$same.core/set-comparator!","^D","same/core.cljc","^H",22,"^S",["^J",[["^1:"]]],"^V",null,"^T",["^J",[null,null]],"^F",1,"^P",false,"^E",47,"^Z","~$clj-nil","^G",47,"^R",1,"^10",true,"^I",["^J",["^K",["^J",[["^1:"]]]]],"^N","Set the default comparator.\n  ```klipse\n  (set-comparator! (compare-ulp 2.0 100))\n  (ish? 0.1 (-> 2 Math/sqrt (Math/pow 2) (- 1.9)))\n  ```"],"~$with-comparator",["^ ","^B",null,"^C",["^ ","^D","^8","^H",26,"^O",["^ ","^P",true,"^Q",1,"^R",1,"^S",["^J",[["^J",["^1:","~$body"]]]],"^I",["^J",[["^1:","~$&","^1>"]]],"^T",["^J",[null]]],"^F",11,"^E",58,"~:macro",true,"^G",58,"^I",["^J",["^K",["^J",[["^1:","~$&","^1>"]]]]],"^N","Temporarily replace the default comparator.\n  ```klipse\n  (with-comparator (compare-ulp 100.0 1e9)\n    (ish? 1.0 0.9999999))\n  ```\n  ```klipse\n  (with-comparator ==\n    (ish? 1.0 0.9999999999999))\n  ```"],"^7","~$same.core/with-comparator","^D","same/core.cljc","^H",26,"^O",["^ ","^P",true,"^Q",1,"^R",1,"^S",["^J",[["^J",["^1:","^1>"]]]],"^I",["^J",[["^1:","~$&","^1>"]]],"^T",["^J",[null]]],"^S",["^J",[["^J",["^1:","^1>"]]]],"^V",null,"^Q",1,"^T",["^J",[null]],"^F",1,"^P",true,"^W",[["^ ","^Q",1,"^P",true,"^X",["^6",["~$seq","~$cljs.core/IList"]]]],"^E",58,"^1?",true,"^Z","^[","^G",58,"^R",1,"^10",false,"^I",["^J",[["^1:","~$&","^1>"]]],"^N","Temporarily replace the default comparator.\n  ```klipse\n  (with-comparator (compare-ulp 100.0 1e9)\n    (ish? 1.0 0.9999999))\n  ```\n  ```klipse\n  (with-comparator ==\n    (ish? 1.0 0.9999999999999))\n  ```"]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:scale","~$cljs.core/binding","~$same.ish/*comparator*"]],"~:order",["^1F","^1G","^1H"]],"^N","Main public API namespace."]