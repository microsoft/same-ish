["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$same.ish","~:imports",null,"~:requires",["^ ","~$same.compare","^9","~$p","~$same.platform","^:","^:"],"~:uses",["^ ","~$compare-ulp","^9"],"~:defs",["^ ","~$default-comparator",["^ ","~:meta",["^ ","~:file","^6","~:line",8,"~:column",6,"~:end-line",8,"~:end-column",24],"^5","~$same.ish/default-comparator","^@","same/ish.cljc","^D",24,"^B",1,"^A",8,"^C",8,"~:tag","~$function","~:doc","The default comparator. Stored in a separate var to make it easier to reset after\n  modifying with [[set-comparator!]]"],"~$*comparator*",["^ ","^?",["^ ","^@","^6","^A",13,"^B",16,"^C",13,"^D",28,"~:dynamic",true],"^5","~$same.ish/*comparator*","^@","same/ish.cljc","^D",28,"^B",1,"^J",true,"^A",13,"^C",13,"^F","^G","^H","The function for comparing individual floats/doubles.\n  Can be overridden using [[with-comparator]] or [[set-comparator!]]."],"~$split-floats",["^ ","~:no-doc",true,"~:protocol-inline",null,"^?",["^ ","^@","^6","^A",19,"^B",16,"^C",19,"^D",28,"^M",true,"~:arglists",["~#list",["~$quote",["^P",[["~$coll"]]]]],"^H","Split a collection into a vector of floating point values (of type Float or Double),\n  and a set of all other values."],"^5","~$same.ish/split-floats","^@","same/ish.cljc","^D",28,"~:method-params",["^P",[["^R"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^B",1,"~:variadic?",false,"^A",19,"~:ret-tag",["^4",[null,"~$any"]],"^C",19,"~:max-fixed-arity",1,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^H","Split a collection into a vector of floating point values (of type Float or Double),\n  and a set of all other values."],"~$Approximate",["^ ","^?",["^ ","~:protocol-symbol",true,"^@","^6","^D",25,"^B",14,"^A",30,"~:protocol-info",["^ ","~:methods",["^ ","~$ish",[["~$this","~$that"]]]],"^C",30,"^H","Protocol for approximately comparing any types (using [[*comparator*]] for floating point parts).","~:jsdoc",["^P",["@interface"]]],"^11",true,"^5","~$same.ish/Approximate","^@","same/ish.cljc","^D",25,"^B",1,"^A",30,"^12",["^ ","^13",["^ ","^14",[["^15","^16"]]]],"~:info",null,"^C",30,"^F","^Y","~:impls",["^4",[null,"~$number","~$boolean","~$array","~$string","~$object"]],"^H","Protocol for approximately comparing any types (using [[*comparator*]] for floating point parts).","^17",["^P",["@interface"]]],"^14",["^ ","^N",null,"^?",["^ ","^@","^6","^A",32,"^B",4,"^C",32,"^D",7,"~:protocol","^18","^H","Return true if the two arguments are approximately equal.","^O",["^P",["^Q",["^P",[["^15","^16"]]]]]],"^1@","^18","^5","~$same.ish/ish","^@","same/ish.cljc","^D",7,"^T",["^P",[["^15","^16"]]],"^U",null,"^V",["^P",[null,null]],"^B",1,"^W",false,"^A",30,"^X","^Y","^C",32,"^Z",2,"^[",true,"^O",["^P",["^Q",["^P",[["^15","^16"]]]]],"^H","Return true if the two arguments are approximately equal."]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else"]],"~:order",["^1E"]],"^H","Comparing different types for same-ish-ness."]